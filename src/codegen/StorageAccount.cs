// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Codegen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\arcdev\azurearc-dev\src\t4\StorageAccount.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class StorageAccount : StorageAccountBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nparam name string\r\nparam location string = resourceGroup().location\r\nparam tags" +
                    " object = {}\r\n\r\n@allowed([\r\n  \'Cool\'\r\n  \'Hot\'\r\n  \'Premium\' ])\r\nparam accessTier " +
                    "string = \'Hot\'\r\nparam allowBlobPublicAccess bool = true\r\nparam allowCrossTenantR" +
                    "eplication bool = true\r\nparam allowSharedKeyAccess bool = true\r\nparam containers" +
                    " array = []\r\nparam shares array = []\r\nparam queues array = []\r\nparam tables arra" +
                    "y = []\r\nparam defaultToOAuthAuthentication bool = false\r\nparam deleteRetentionPo" +
                    "licy object = {}\r\n@allowed([ \'AzureDnsZone\', \'Standard\' ])\r\nparam dnsEndpointTyp" +
                    "e string = \'Standard\'\r\nparam kind string = \'StorageV2\'\r\nparam minimumTlsVersion " +
                    "string = \'TLS1_2\'\r\nparam networkAcls object = {\r\n  bypass: \'AzureServices\'\r\n  de" +
                    "faultAction: \'Allow\'\r\n}\r\n@allowed([ \'Enabled\', \'Disabled\' ])\r\nparam publicNetwor" +
                    "kAccess string = \'Enabled\'\r\nparam sku object = { name: \'Standard_LRS\' }\r\n\r\nresou" +
                    "rce storage \'Microsoft.Storage/storageAccounts@2022-05-01\' = {\r\n  name: name\r\n  " +
                    "location: location\r\n  tags: tags\r\n  kind: kind\r\n  sku: sku\r\n  properties: {\r\n   " +
                    " accessTier: accessTier\r\n    allowBlobPublicAccess: allowBlobPublicAccess\r\n    a" +
                    "llowCrossTenantReplication: allowCrossTenantReplication\r\n    allowSharedKeyAcces" +
                    "s: allowSharedKeyAccess\r\n    defaultToOAuthAuthentication: defaultToOAuthAuthent" +
                    "ication\r\n    dnsEndpointType: dnsEndpointType\r\n    minimumTlsVersion: minimumTls" +
                    "Version\r\n    networkAcls: networkAcls\r\n    publicNetworkAccess: publicNetworkAcc" +
                    "ess\r\n  }\r\n\r\n  resource blobServices \'blobServices\' = if (!empty(containers)) {\r\n" +
                    "    name: \'default\'\r\n    properties: {\r\n      deleteRetentionPolicy: deleteReten" +
                    "tionPolicy\r\n    }\r\n    resource container \'containers\' = [for container in conta" +
                    "iners: {\r\n      name: container.name\r\n      properties: {\r\n        publicAccess:" +
                    " contains(container, \'publicAccess\') ? container.publicAccess : \'None\'\r\n      }\r" +
                    "\n    }]\r\n  }\r\n\r\n  resource fileServices \'fileServices\' = if (!empty(shares)) {\r\n" +
                    "    name: \'default\'\r\n    properties: { }\r\n    resource share \'shares\' = [for sha" +
                    "re in shares: {\r\n      name: share.name\r\n      properties: {\r\n        accessTier" +
                    ": accessTier\r\n      }\r\n    }]\r\n  }\r\n\r\n  resource queueService \'queueServices\' = " +
                    "if (!empty(queues)) {\r\n    name: \'default\'\r\n    properties: { }\r\n    resource qu" +
                    "eue \'queues\' = [for queue in queues: {\r\n      name: queue.name\r\n      properties" +
                    ": {\r\n        metadata: {}\r\n      }\r\n    }]\r\n  }\r\n\r\n  resource tableService \'tabl" +
                    "eServices\' = if (!empty(tables)) {\r\n    name: \'default\'\r\n    properties: { }\r\n  " +
                    "  resource table \'tables\' = [for table in tables: {\r\n      name: table.name\r\n   " +
                    "   properties: { }\r\n    }]\r\n  }\r\n}\r\n\r\noutput name string = storage.name\r\noutput " +
                    "primaryEndpoints object = storage.properties.primaryEndpoints\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class StorageAccountBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
